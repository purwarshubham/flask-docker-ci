# This workflow runs pytest and builds the docker image and push the image in ECR with tag : latest

name: Build and Push Docker to ECR

on:
  push:
    branches: [main] # Triggers the workflow every time code is pushed to the main branch

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: checkout node
        uses: actions/checkout@v3 # Fetch your repository's source code - Clones the latest code from your GitHub repo into the runner

      - name: setup python
        uses: actions/setup-python@v5 # Installs Python 3.10 so you can run your app and tests
        with:
          python-version: '3.10'

      - name: Install Python dependencies # Installs packages from requirements.txt + test tools
        run: pip install -r requirements.txt

      - name: Run Python tests # Runs your test suite to verify code correctness
        run: pytest    # Runs all test files like test_*.py
        continue-on-error: true  # Optional (default behavior, but explicit) # Stop further steps from executing (unless continue-on-error: true is set)

      - name: Lint dockerfile with Hadolint
        uses: hadolint/hadolint-action@v3.1.0  #  Analyzes your Dockerfile for syntax issues and bad practices
        with:
          dockerfile: Dockerfile               #  This found the issue - Update your Dockerfile to include the --no-cache-dir option:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3    # Sets up a more powerful Docker builder that supports caching and multi-platform builds

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          # Option 1 : Using latest tag 
          # IMAGE_TAG=latest
          # Option 2 : Using manual version
          # IMAGE_TAG=with-manual-version-1.0.0
          # Option 3 : Sets up a git commit as tag         
          IMAGE_TAG=${{ github.sha }}
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Done
        run: echo "Image pushed to ECR successfully!"


